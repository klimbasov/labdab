// laborotoryWork7.h
#pragma once
#include <math.h>
namespace laboratoryWork7 {
	template<typename ValueTipe, typename KeyType>
	class map;
	class mapException;
	template<class T>
	class test;
}

class mapException: public std::exception
{
public:
	mapException(std::string error_massege_text):std::exception(error_massege_text.c_str()) {

	}
	~mapException() {

	}
};



template<typename ValueType, typename KeyType>
class map {
private:
	class Node {
		Node		*leftNode=nullptr,
					*rightNode=nullptr,
					*parentNode=nullptr;

		ValueType	value;

		KeyType		key;

		int			factor = 0;
		/*
		bool _recount_Branch_factor() {
			bool If_ballance_is_needed = false;
			if (!this->parentNode) return;
			if (this = this->parentNode->rightNode)
				this->parentNode->factor++;
			else
				this->parentNode->factor--;
			if (this->prentNode->HasRightChild() && this->parentNode->HasLeftChild()) return false;
			Node* currentNode = this->parentNode;
			while (currentNode->parentNode)
			{
				if (currentNode = currentNode->parentNode->leftNode) {
					currentNode->parentNode->factor--;
				}
				if (currentNode = currentNode->parentNode->rightNode) {
					currentNode->parentNode->factor++;
				}
				currentNode = currentNode->parentNode;
				if (!If_ballance_is_needed)
					if (abs(currentNode->factor) == 2) If_ballance_is_needed = true;
				if (!currentNode->factor) break;

			}
			return If_ballance_is_needed;
		}
		void ballance__branch() {
			if (!this->_recount_Branch_factor()) return;
			Node *currentNode = this,
				 *nodeToSwap=nullptr;
			while (currentNode = currentNode->parentNode)
			{
				if (currentNode->factor == 2) {
					if (currentNode->parentNode) {
						if (currentNode = currentNode->parentNode->leftNode)
							currentNode->parentNode->leftNode = currentNode->rightNode;
						else
							currentNode->parentNode->rightNode = currentNode->rightNode;
					}
					currentNode->rightNode->parentNode = currentNode->parentNode;
					currentNode->parentNode = currentNode->rightNode;
					currentNode->rightNode = currentNode->rightNode->leftNode;
					currentNode->parentNode->leftNode = currentNode;
					currentNode->RecounBranchFtactor();										//newTry
					break;
				}
				if (currentNode->factor == -2) {
					nodeToSwap = currentNode->leftNode->get_most_right();
					nodeToSwap->Eject();
					if (currentNode->parentNode) {
						*currentNode->GetParentPointerToObject() = nodeToSwap;
					}
					currentNode->leftNode->parentNode = nodeToSwap;
					currentNode->parentNode = nodeToSwap;
					nodeToSwap->leftNode = currentNode->leftNode;
					nodeToSwap->rightNode = currentNode;
					currentNode->leftNode = nullptr;
					currentNode->parentNode->leftNode = currentNode;
					currentNode->RecounBranchFtactor();
					break;
				}
			}
			this->_recount_Branch_factor();
		}
		*/
		bool _ballance_branch() {
			if (this->factor == 2) {
				if (this->rightNode->factor >= 0) {
					if (this->parentNode)
					*this->GetParentPointerToObject() = this->rightNode;
					this->rightNode->parentNode = this->parentNode;
					this->parentNode = this->rightNode;
					this->rightNode = this->parentNode->leftNode;
					this->parentNode->leftNode = this;
					this->parentNode->leftNode = this;
					if (this->rightNode)
						this->rightNode->parentNode = this;
					return true;
				}
				if (this->rightNode->factor < 0) {
					if (this->parentNode)
					*this->GetParentPointerToObject() = this->rightNode->leftNode;
					this->rightNode->leftNode->parentNode = this->parentNode;
					this->parentNode = this->rightNode->leftNode;
					this->rightNode->parentNode = this->parentNode;
					this->rightNode->leftNode = this->parentNode->rightNode;
					this->parentNode->rightNode = this->rightNode;
					this->rightNode = this->parentNode->leftNode;
					this->parentNode->leftNode = this;
					if (this->rightNode)
						this->rightNode->parentNode = this;
					if (this->parentNode->rightNode->leftNode)
						this->parentNode->rightNode->leftNode->parentNode = this->parentNode->rightNode;
					return true;
				}
			}
			if (this->factor == -2) {
				if (this->leftNode->factor <= 0) {
					if (this->parentNode)
					*this->GetParentPointerToObject() = this->leftNode;
					this->leftNode->parentNode = this->parentNode;
					this->parentNode = this->leftNode;
					this->leftNode = this->parentNode->rightNode;
					this->parentNode->rightNode = this;
					if (this->leftNode)
						this->leftNode->parentNode = this;
					return true;
					
				}
				if (this->leftNode->factor > 0) {
					if(this->parentNode)
					*this->GetParentPointerToObject() = this->leftNode->rightNode;
					this->leftNode->rightNode->parentNode = this->parentNode;
					this->parentNode = this->leftNode->rightNode;
					this->leftNode->parentNode = this->parentNode;
					this->leftNode->rightNode = this->parentNode->leftNode;
					this->parentNode->leftNode = this->leftNode;
					this->leftNode = this->parentNode->rightNode;
					this->parentNode->rightNode = this;
					if (this->leftNode)
						this->leftNode->parentNode = this;
					if(this->parentNode->leftNode->rightNode)
						this->parentNode->leftNode->rightNode->parentNode = this->parentNode->leftNode;
					return true;
				}
			}
			return false;
		}//cannon
		int _recount_branch_factor(){
			int LeftBrenchHeight = 0,
				RightBrenchHeight = 0;
			if (this->leftNode) {
				LeftBrenchHeight = this->leftNode->_recount_branch_factor();
			}
			if (this->rightNode) {
				RightBrenchHeight = this->rightNode->_recount_branch_factor();
			}
			this->factor = RightBrenchHeight - LeftBrenchHeight;
			return (RightBrenchHeight < LeftBrenchHeight) ? LeftBrenchHeight+1 : RightBrenchHeight+1;
		}
		void _fix_bad_factor() {
			if (this->leftNode) this->leftNode->_fix_bad_factor();
			if (this->rightNode) this->rightNode->_fix_bad_factor();
			if (this->_ballance_branch()) this->getRoot()->_recount_branch_factor();
		}
	public:
		Node* get_most_left() {
			if (this->leftNode)
				return this->leftNode->get_most_left();
			return this;
		}
		Node* get_most_right() {
			if (this->rightNode)
				return this->rightNode->get_most_right();
			return this;
		}
		Node(ValueType value, KeyType key, Node* rootNode = nullptr) {
			if (rootNode) {
				while (rootNode->IsParent())
				{
					if (key == rootNode->key) return;
					if (key > rootNode->key)
						if (rootNode->rightNode)
							rootNode = rootNode->rightNode;
						else break;
					else
						if (rootNode->leftNode)
							rootNode = rootNode->leftNode;
						else break;
				}
			if (key == rootNode->key) return;
			if (key > rootNode->key)
				rootNode->rightNode = this;
			else
				rootNode->leftNode = this;
			}
		
			this->parentNode = rootNode;
			this->value = value;
			this->key = key;
			this->leftNode = nullptr;
			this->rightNode = nullptr;
			
			if (parentNode) { 
				this->getRoot()->_recount_branch_factor(); 
				this->getRoot()->_fix_bad_factor();
			}
		}
		Node() {
			this->parentNode = nullptr;
			this->leftNode = nullptr;
			this->rightNode = nullptr;
		}
		Node(const Node& newNode) {
			this->value = newNode.value;
			this->key = newNode.key;
			this->parentNode = newNode.parentNode;
			this->leftNode = newNode.leftNode;
			this->rightNode = newNode.rightNode;
			this->factor = newNode.factor;

		}
		void setValue(ValueType newValue) {
			try
			{
				if (!this)
					throw mapException("this was nullptr");
				this->value = newValue;
			}
			catch (mapException& exeption) {
				std::cout << exeption.what();
			}
		}
		bool IsParent() {
			try
			{
				if (!this)
					throw mapException("this was nullptr");
				if (leftNode || rightNode)
					return true;
				return false;
			}
			catch (mapException& exeption) {
				std::cout << exeption.what();
			}
		}
		bool HasLeftChild() {
			try
			{
				if (!this)
					throw mapException("this was nullptr");
				if (this->leftNode)
					return true;
				return false;
			}
			catch (mapException& exeption) {
				std::cout << exeption.what();
			}
		}
		bool HasRightChild() {
			try
			{
				if (!this)
					throw mapException("this was nullptr");
				if (this->rightNode)
					return true;
				return false;
			}
			catch (mapException& exeption) {
				std::cout << exeption.what();
			}
		}
		Node* LeftChild() {
			try
			{
				if (!this)
					throw mapException("this was nullptr");
				if (this->leftNode) return leftNode;
				return nullptr;
			}
			catch (mapException& exeption) {
				std::cout << exeption.what();
			}
		}
		Node* getRoot() {
			try
			{
				if (!this)
					throw mapException("this was nullptr");
				Node* temp = this;
				while (temp->getParent())
				{
					temp = temp->getParent();
				}
				return temp;
			}
			catch (mapException& exeption) {
				std::cout << exeption.what();
			}
		}
		Node* RightChild() {
			try
			{
				if (!this)
					throw mapException("this was nullptr");
				if (this->rightNode) return rightNode;
				return nullptr;
			}
			catch (mapException& exeption) {
				std::cout << exeption.what();
			}
		}
		const int& getFactor() const {
			try
			{
				if (!this)
					throw mapException("this was nullptr");
				return this->factor;
			}
			catch (mapException& exeption) {
				std::cout << exeption.what();
			}
		}
		const ValueType& getValue() const {
			try
			{
				if (!this)
					throw mapException("this was nullptr");
				return this->value;
			}
			catch (mapException& exeption) {
				std::cout << exeption.what();
			}
		}
		const KeyType& getKey() const {
			try
			{
				if (!this)
					throw mapException("this was nullptr");
				return this->key;
			}
			catch (mapException& exeption) {
				std::cout << exeption.what();
			}
		}
		Node* getParent() const {
			try
			{
				if (!this)
					throw mapException("this was nullptr");
				return this->parentNode;
			}
			catch (mapException& exeption) {
				std::cout << exeption.what();
			}
		}
		Node* serchKey(KeyType key) {
			try
			{
			if (!this) 
				throw mapException("this was nullptr");
			if (this->key == key) return this;
			if (this->key > key && this->leftNode) return this->leftNode->serchKey(key);
			if(this->key < key && this->rightNode) return this->rightNode->serchKey(key);
			return nullptr;

			}
			catch (mapException& exeption) {
				std::cout << exeption.what();
			}
		}
		Node** GetParentPointerToObject() {
			try
			{
				if (!this)
					throw mapException("this was nullptr");
				if (!this->parentNode) return nullptr;
				if (this->parentNode->leftNode == this)
					return &this->parentNode->leftNode;
				else
					return &this->parentNode->rightNode;
			}
			catch (mapException& exeption) {
				std::cout << exeption.what();
			}
		}
		Node* Eject(Node* rootPointer) {
			try
			{
				if (!this)
					throw mapException("this was nullptr");
				Node* temp;
				if (!this->IsParent()) {
					if (this->parentNode)
					{
						temp = this->parentNode;
						*this->GetParentPointerToObject() = nullptr;
						this->parentNode = nullptr;
						temp->_recount_branch_factor();
						temp->_fix_bad_factor();
						return temp->getRoot();
					}
					return nullptr;
				}
				if (this->factor == 1 || this->factor == 0) {
					temp = this->rightNode->get_most_left();
					*temp->GetParentPointerToObject() = nullptr;
					if (temp->rightNode) {
						temp->rightNode->parentNode = temp->parentNode;
						temp->parentNode->leftNode = temp->rightNode;
					}
					temp->parentNode = this->parentNode;
					if (this->parentNode) {
						*this->GetParentPointerToObject() = temp;
					}
					if (!(this->leftNode == temp))
					{
						temp->leftNode = this->leftNode;
						temp->leftNode->parentNode = temp;
					}
					temp->rightNode = this->rightNode;
					if (temp->rightNode)
						temp->rightNode->parentNode = temp;
					this->parentNode = nullptr;
					this->leftNode = nullptr;
					this->rightNode = nullptr;
					temp->getRoot()->_recount_branch_factor();
					temp->getRoot()->_fix_bad_factor();
					return temp->getRoot();


				}
				if (this->factor == -1) {
					temp = this->rightNode->get_most_right();
					*temp->GetParentPointerToObject() = nullptr;
					if (temp->leftNode) {
						temp->leftNode->parentNode = temp->parentNode;
						temp->parentNode->rightNode = temp->leftNode;
					}
					temp->parentNode = this->parentNode;
					if (this->parentNode) {
						*this->GetParentPointerToObject() = temp;
					}
					if (!(this->rightNode == temp))
					{
						temp->rightNode = this->rightNode;
						temp->rightNode->parentNode = temp;
					}
					temp->leftNode = this->leftNode;
					if (temp->leftNode)
						temp->leftNode->parentNode = temp;
					this->parentNode = nullptr;
					this->leftNode = nullptr;
					this->rightNode = nullptr;
					temp->getRoot()->_recount_branch_factor();
					temp->getRoot()->_fix_bad_factor();
					return temp->getRoot();
				}
			}
			catch (mapException& exeption) {
				std::cout << exeption.what();
			}
		}// Node still can be used without loosing data

		friend class Iterator;
	};
public:
	class Iterator {
		typedef Node Item;
		Item* currentItem;
	public:
		Iterator(const Iterator& newIterator) {
			this->currentItem = newIterator.currentItem;
		}
		Iterator() {}
		Iterator(Item* newItem) {

			currentItem = newItem;
			/*this->currentItem->value = newItem->value;
			this->currentItem->key = newItem->key;
			this->currentItem->parentNode = newItem->parentNode;
			this->currentItem->leftNode = newItem->leftNode;
			this->currentItem->rightNode = newItem->rightNode;
			this->currentItem->factor = newItem->factor;*/
		}
		Iterator(Item& newItem) {
			this->currentItem = &newItem;
		}
		Iterator& operator ++(int) {
			if (!this->currentItem) return *this;
			Iterator tempReturnIterator(*this);
			if (this->currentItem->HasRightChild()) {
				this->currentItem = this->currentItem->RightChild();
				while (this->currentItem->HasLeftChild()) {
					this->currentItem = this->currentItem->LeftChild();
				}
			}
			else
			{
				Iterator _t_(this->currentItem->getParent()->LeftChild());
				if (this->currentItem == _t_.currentItem) {

					this->currentItem = this->currentItem->getParent();
				}
				else
				{
					if (this->currentItem == this->currentItem->getParent()->RightChild()) {
						while (this->currentItem == this->currentItem->getParent()->RightChild())
						{
							this->currentItem = this->currentItem->getParent();
							if (!this->currentItem->getParent()) break;
						}
						this->currentItem = this->currentItem->getParent();
					}
					//else this->currentItem = nullptr;
				}
			}
			return tempReturnIterator;
		}
		Iterator& operator ++() {
			Iterator tempReturnIterator(*this);
			if (this->currentItem->HasRightChild()) {
				this->currentItem = this->currentItem->RightChild();
				while (this->currentItem->HasLeftChild()) {
					this->currentItem = this->currentItem->LeftChild();
				}
			}
			else
			{
				Iterator _t_(this->currentItem->getParent()->LeftChild());
				if (this->currentItem == _t_.currentItem) {

					this->currentItem = this->currentItem->getParent();
				}
				else
				{
					if (this->currentItem == this->currentItem->getParent()->RightChild()) {
						while (this->currentItem == this->currentItem->getParent()->RightChild() && this->currentItem)
						{
							this->currentItem = this->currentItem->getParent();
						}
						this->currentItem = this->currentItem->getParent();
					}
					else this->currentItem = nullptr;
				}
			}
			return this;
		}
		Item& operator *() {
			try
			{
				if (!this)
					throw mapException("this was nullptr [Iterator]");
				return *currentItem;
			}
			catch (mapException& exeption) {
				std::cout << exeption.what();
			}
		}
		Item* operator ->()const {
			try
			{
				if (!this)
					throw mapException("this was nullptr [Iterator]");
				return this->currentItem;
			}
			catch (mapException& exeption) {
				std::cout << exeption.what();
			}
		}
		bool operator ==(const Iterator& iteratorToCompare) {
			try
			{
				if (!this)
					throw mapException("this was nullptr [Iterator]");
				return this->currentItem == iteratorToCompare.currentItem;
			}
			catch (mapException& exeption) {
				std::cout << exeption.what();
			}
		}
		bool operator !=(const Iterator& iteratorToCompare) {
			try
			{
				if (!this)
					throw mapException("this was nullptr [Iterator]");
				return this->currentItem != iteratorToCompare.currentItem;
			}
			catch (mapException& exeption) {
				std::cout << exeption.what();
			}
		}
		Iterator& operator = (const Iterator& _iter) {
			try
			{
				if (!this)
					throw mapException("this was nullptr [Iterator]");
				return Iterator(_iter.currentNode);
			}
			catch (mapException& exeption) {
				std::cout << exeption.what();
			}
			//this->currentNode = _iter.currentNode;
		}
	};
private:
	typedef Node Item;
	Item* root = nullptr;
public:
	map(){
		
	}
	void addItem(ValueType itemValue, KeyType itemKey) {
		if(!root)
			root = new Node(itemValue, itemKey, root);
		else
		{
			new Node(itemValue, itemKey, root);
			root = root->getRoot();
		}

	}
	void ejectItem(Item* oddItem) {	
		try
		{
			if (!root) throw mapException("Tree was Empty");
		if(oddItem)
		root=oddItem->Eject(root);
		}
		catch (mapException&exeption)
		{
			std::cout << exeption.what();
		}
	}
	Item* serchItemByKey(KeyType keyToSerch) {
		try
		{
			if (!this)
				throw mapException("root was nullptr");
			return root->serchKey(keyToSerch);
		}
		catch (mapException& exeption) {
			std::cout << exeption.what();
		}
	}
	void addUniqueItem(ValueType itemValue, KeyType itemKey) {
		if (!this->serchItemByValue(itemValue)) this->addItem(itemValue, itemKey);
	}
	Item* serchItemByValue(ValueType ValueToSerch) {
		try
		{
			if (!this)
				throw mapException("root was nullptr");
			for (Iterator iter = this->begin(); iter != this->end(); iter++) {
				if (iter->getValue() == ValueToSerch)
					return	&*iter;
			}
		}
		catch (mapException& exeption) {
			std::cout << exeption.what();
		}
		return nullptr;
	}

	Iterator& begin() {
		Iterator* newIterator = new Iterator(root->get_most_left());
		return *newIterator;
	}
	Iterator& end() {
		Iterator* newIterator =new Iterator(nullptr);
		return *newIterator;
	}
};

// FileManager
#pragma once
#include <iostream>
#include <fstream>
#include <string>
namespace laborotoryWork8 {
	class confectionery;
	class FileManager;
}
class confectionery;
class FileManager;
class confectionery {

private:
	std::string		productName,
					best_before_date;
	size_t			quantity;
public:
	confectionery(std::string, std::string, size_t);
	confectionery();
	confectionery(const confectionery&);
	void setProductName(std::string);
	void setBestBeroreDate(std::string);
	void setQuantity(size_t);
	std::string getProductName()const;
	std::string getBestBeroreDate()const;
	size_t getQuantity()const;
	bool operator ==(const confectionery&);

	friend std::fstream& operator >>(std::fstream&, confectionery&);
	friend std::fstream& operator <<(std::fstream&, const confectionery&);
	friend std::istream& operator >>(std::istream&, confectionery&);
	friend std::ostream& operator <<(std::ostream&, const confectionery&);
};
class FileManager
{
public:	
	void spesialsort(std::string comandbar) {
		size_t f=0, t=1;
		confectionery* l = new confectionery();
		confectionery i = *l;
		this->sotr<confectionery, decltype(&confectionery::getBestBeroreDate)>(&confectionery::getBestBeroreDate);
		if (this->Stream.is_open()) this->Stream.close();
		this->Stream.open(this->path, std::ios::in | std::ios::out);
		while ((this->Stream>>i),i.getBestBeroreDate()!=comandbar && !this->Stream.eof())
		{
			if (this->Stream.eof()) {
				this->Stream.close();
				std::cout << "none";
				return;
			}
			this->Stream.clear();
			f = this->Stream.tellg();
		}
		while ((this->Stream >> i), i.getBestBeroreDate() == comandbar && !this->Stream.eof())
		{
			++t;
		}
		this->sotr<confectionery, decltype(&confectionery::getQuantity)>(&confectionery::getQuantity, f,t-1);
		if (this->Stream.is_open()) this->Stream.close();
		this->Stream.open(this->path, std::ios::in | std::ios::out);
		this->Stream.seekg(f, std::ios::beg);
		int p = 0;
		while (p!=t && !this->Stream.eof())
		{
			this->Stream >> i;
			std::cout << i.getProductName() << "\t\t\t" << i.getQuantity()<< std::endl;
			++p;
		}
		this->Stream.clear();
		this->Stream.close();
		return;

	}
	FileManager(const char*);
	void clear();
	template<class T>
	void addItem(const T& newStatement) {
		if (this->Stream.is_open()) this->Stream.close();
		this->Stream.open(this->path, std::ios::in | std::ios::out | std::ios::ate);
		this->Stream << newStatement;
		this->Stream.close();
		this->Stream.clear();
	}
	template<class T>
	void ejectItem(const T& oddStatement) {
		int cutPosition, pasetPosition, quantity =-1, iterCounter = 0;
		T temporaryStatement;
		if (this->Stream.is_open()) this->Stream.close();
		this->Stream.open(this->path, std::ios::in | std::ios::out);
		while (!this->Stream.eof())
		{
			this->Stream >> temporaryStatement;
			++quantity;
		}
		this->Stream.clear();
		this->Stream.seekg(0, std::ios::beg);
		while (iterCounter!=quantity)
		{
			++iterCounter;
			pasetPosition = this->Stream.tellg();
			this->Stream >> temporaryStatement;
			this->Stream.clear();
			if (temporaryStatement == oddStatement) {
				//--quantity;
				this->Stream.seekp(this->Stream.tellg(), std::ios::beg);
				this->Stream >> temporaryStatement;
				this->Stream.clear();
				while (iterCounter != quantity)
				{
				cutPosition = this->Stream.tellp();
				this->Stream.seekp(pasetPosition, std::ios::beg);
				this->Stream << temporaryStatement;
				pasetPosition = this->Stream.tellp();
				this->Stream.seekp(cutPosition, std::ios::beg);
				this->Stream >> temporaryStatement;
				this->Stream.clear();
				++iterCounter;
				}
				this->Stream.clear();
				this->Stream.seekp(pasetPosition, std::ios::beg);
				this->Stream << 'EOF';
				break;
			}
		}
		this->Stream.close();
		this->Stream.clear();
	}
	template<class T, class U >
	void sotr(U func_ptr_sort, size_t be_pos = 0, size_t quont=0){

		T	currentObject,
			spotedObject;
		int posBegin, posMid, posEnd, quantity = -1, iterCounter = 0;
		if (this->Stream.is_open()) this->Stream.close();
		this->Stream.open(this->path, std::ios::in | std::ios::out);
		this->Stream.seekg(be_pos, std::ios::beg);
		this->Stream.seekp(be_pos, std::ios::beg);
		this->Stream >> currentObject;
		this->Stream.clear();
		posBegin = be_pos;
		posMid = this->Stream.tellg();
		if (this->Stream.eof()) {
			this->Stream.close();
			return;
		}
		if(!quont)
		while (!this->Stream.eof())
		{
			this->Stream >> currentObject;
			++quantity;
		}
		else {
			quantity = quont;
		}
		this->Stream.clear();
		this->Stream.seekg(be_pos, std::ios::beg);
		this->Stream.close();
		while (quantity)
		{
			this->Stream.open(this->path, std::ios::in | std::ios::out);
			this->Stream >> currentObject;
			posBegin = be_pos;
			posMid = 1+this->Stream.tellg();//<--
			while (iterCounter < quantity)
			{
				this->Stream >> spotedObject;
				this->Stream.clear();
				posEnd = 1+this->Stream.tellg();
				if ((spotedObject.*func_ptr_sort)() < (currentObject .* func_ptr_sort)()) {
					this->Stream.seekp(posBegin, std::ios::beg);
					this->Stream << spotedObject << currentObject;
					this->Stream.clear();
					this->Stream.seekg(posEnd, std::ios::beg);
					posBegin += posEnd - posMid;
					posMid = posEnd;
				}
				else {
					currentObject = spotedObject;
					posBegin = posMid;
					posMid = posEnd;
				}
				++iterCounter;
			}
			this->Stream.clear();
			this->Stream.close();
			//this->Stream.seekg(0, std::ios::beg);
			iterCounter = 0;
			--quantity;
		}
		this->Stream.close();
	}
	std::string getline();
	template<class T>
	void apochemubiinet() {
		T obj;
		size_t were = 0;
		this->Stream.clear();
		if (this->Stream.is_open()) this->Stream.close();
		this->Stream.open(this->path, std::ios::in | std::ios::out);
		this->Stream.seekg(were, std::ios::beg);
		this->Stream >> obj;
		were = this->Stream.tellg();
		while (!this->Stream.eof())
		{
			this->Stream.clear();
			this->Stream.seekg(were, std::ios::beg);
			
			std::cout << obj;
			this->Stream >> obj;
			if (this->Stream.eof()) break;
			were = this->Stream.tellg();
		}
		this->Stream.clear();
		this->Stream.close();
	}
	void setline(std::string&);
	void sortByQuantity();
	template<class T>
	void operator <<(const T& newStatement) {
		try {
			if (this->Stream.is_open()) this->Stream.close();
			this->Stream.open(this->path, std::ios::in | std::ios::out | std::ios::ate);
			this->Stream << newStatement;
			this->Stream.close();
			this->Stream.clear();
		}
		catch (...) {
			this->Stream.close();
			this->Stream.clear();
		}

	}
	template<class T>
	void operator >>(T& newStatement) {
		try {
			if (this->Stream.is_open()) this->Stream.close();
			this->Stream.open(this->path, std::ios::in | std::ios::out | std::ios::ate);
			this->Stream >> newStatement;
			this->Stream.close();
			this->Stream.clear();
		}
		catch (...) {
			this->Stream.close();
			this->Stream.clear();
		}

	}
	void readBlock(std::string& str, size_t count) {
		if (this->Stream.is_open()) this->Stream.close();
		this->Stream.open(this->path, std::ios::in | std::ios::out);
		char* cstr = new char[count+1];
		this->Stream.read(cstr, count);
		cstr[count] = '\0';
		str.clear();
		str = cstr;
		this->Stream.clear();
		this->Stream.close();
	}
	void writeblock(std::string& str) {
		size_t count = str.size();
		if (this->Stream.is_open()) this->Stream.close();
		this->Stream.open(this->path, std::ios::in | std::ios::out);
		this->Stream.write(str.c_str(), count);
		this->Stream.clear();
		this->Stream.close();
	}
	void setPath(const char* name) {
		this->path = name;
	}
	~FileManager();
private:

	std::fstream	Stream;
	std::string		path;
};

//fileManager.cpp
#include "FileManager.h"

std::fstream& operator <<(std::fstream& stream, const confectionery& cur_confectionery) {
	stream << cur_confectionery.productName <<"\r" << cur_confectionery.best_before_date  << "\r" << cur_confectionery.quantity  << "\r";
	return stream;
}
std::fstream& operator >> (std::fstream& stream, confectionery& cur_confectionery) {
	stream >> cur_confectionery.productName >> cur_confectionery.best_before_date >> cur_confectionery.quantity ;
	return stream;
}
std::istream& operator >>(std::istream& stream, confectionery& obj){
	stream >> obj.productName >> obj.best_before_date >> obj.quantity;
	return stream;
}
std::ostream& operator <<(std::ostream& stream, const confectionery& obj) {
	stream << obj.productName <<'\t'<< obj.best_before_date << '\t' << obj.quantity<< '\n';
	return stream;
}
bool confectionery::operator==(const confectionery& objectToCompare) {
	if (this->productName == objectToCompare.productName
		&& this->best_before_date == objectToCompare.best_before_date
		&& this->quantity == objectToCompare.quantity)
		return true;
	return false;
}
confectionery::confectionery(std::string name, std::string validTo, size_t quantity) {
	this->productName = name;
	this->best_before_date = validTo;
	this->quantity = quantity;
}
confectionery::confectionery() {
}
confectionery::confectionery(const confectionery& newConfectionery) {
	this->productName = newConfectionery.productName;
	this->best_before_date = newConfectionery.best_before_date;
	this->quantity = newConfectionery.quantity;
}
void confectionery::setProductName(std::string name) {
	this->productName = name;
}
void confectionery::setBestBeroreDate(std::string date) {
	this->best_before_date = date;
}
void confectionery::setQuantity(size_t quantity) {
	this->quantity = quantity;
}
std::string confectionery::getProductName()const {
	return this->productName;
}
std::string confectionery::getBestBeroreDate()const {
	return this->best_before_date;
}
size_t confectionery::getQuantity()const {
	return this->quantity;
}



//fileManager
FileManager::FileManager(const char* path):path(path) {
}
FileManager::~FileManager() {
	if (this->Stream.is_open())
		this->Stream.close();
}
void FileManager::setline(std::string& newStatement) {
	int counter = 0;
	if (newStatement.empty())return;
	if (this->Stream.is_open()) this->Stream.close();
	this->Stream.open(this->path, std::ios::in | std::ios::out | std::ios::ate);
	while (counter<newStatement.size())
	{
		this->Stream.put(newStatement[counter]);
		++counter;
	}
	this->Stream.put('\r');
	this->Stream.close();
}
std::string FileManager::getline() {
	std::string Statement;
	char hereWeUseC_stileCode;
	if (!this->Stream.is_open()) this->Stream.open(this->path, std::ios::in | std::ios::out);
	while (hereWeUseC_stileCode = this->Stream.get() != '\r' && !this->Stream.eof())
	{
		Statement + hereWeUseC_stileCode;
	}
	return Statement;
}
void FileManager::clear() {
	if (this->Stream.is_open()) {
		this->Stream.close();
	}
	this->Stream.open(this->path, std::ios::out | std::ios::trunc);
	this->Stream.clear();
	this->Stream.close();
}
//main.cpp
#include <iostream>
#include <fstream>
#include "FileManager.h"
#include"LaborotoryWork7.h"
class A {
	int a = 1;
	bool b = 0;
};
void main() {
	
	map<confectionery, int> Map;
	Map.addItem(confectionery("roll", "booo", 34), 1);
	Map.addItem(confectionery("poll", "gooo", 0), 2);
	Map.addItem(confectionery("lasochk", "be", 2), 9);
	Map.addItem(confectionery("strange", "be", 3), 5);
	Map.addItem(confectionery("kroshaaaaaaaaaaa", "be", 990), 7);
	Map.addItem(confectionery("mlin", "cluch", 990), 0);
	Map.addItem(confectionery("doll", "zooo", 1), 3);
	Map.addItem(confectionery("global", "be", 6), -1);
	FileManager fileManager("file.txt");
	fileManager.clear();
	for (map<confectionery, int>::Iterator _begin = Map.begin(), _end = Map.end(); _begin != _end; _begin++) {
	//	fileManager.addItem<confectionery>(_begin->getValue());
		fileManager << _begin->getValue();
	}
	fileManager.apochemubiinet<confectionery>();

	//fileManager.sotr< confectionery, decltype(&confectionery::getBestBeroreDate)>(&confectionery::getBestBeroreDate);
	fileManager.spesialsort("be");
	std::cout << '\n';
	fileManager.apochemubiinet<confectionery>();
	fileManager.setPath("bin.bin");
	std::string it("this is your daly dose of internet");
	size_t counte = it.size();
	fileManager.writeblock(it);
	it.clear();
	fileManager.readBlock(it, counte);
	std::cout << it;
	//fileManager.sotr< confectionery, decltype(&confectionery::getProductName)>(&confectionery::getProductName);
	//std::cout << (confectionery("poll", "gooo", 0) == confectionery("poll", "gooo", 0))<< std::endl;
	//fileManager.ejectItem<confectionery>(confectionery("poll", "gooo", 0));

	
}
